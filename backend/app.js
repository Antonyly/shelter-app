// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env
require('dotenv').config();

const express = require('express');
const mongoose = require('mongoose');

const app = express();

// –ü–æ—Ä—Ç —ñ MongoDB URI –∑ .env
const PORT = process.env.PORT || 3000;
const MONGO_URI = process.env.MONGO_URI;

// Routers
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');


// –°–µ—Ä–µ–¥–æ–≤–∏—â–µ Express
app.use(express.json());
app.use('/api/auth', authRoutes);
app.use(express.urlencoded({ extended: true }));
app.use('/api/user', userRoutes);

// –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–µ–Ω–µ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.send('üêæ –ü—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω API –∑–∞–ø—É—â–µ–Ω–æ!');
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoD
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:${PORT}`);
  });

})
.catch((err) => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err.message);
});
